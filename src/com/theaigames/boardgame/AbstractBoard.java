// Copyright 2016 theaigames.com (developers@theaigames.com)

//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at

//        http://www.apache.org/licenses/LICENSE-2.0

//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//  
//    For the full copyright and license information, please view the LICENSE
//    file that was distributed with this source code.

package com.theaigames.boardgame;

/**
 * abstract class AbstractBoard
 * 
 * DO NOT EDIT THIS FILE
 * 
 * Extend this class with your main method.
 * 
 * @author Joost de Meij <developers@starapple.nl>
 */
public abstract class AbstractBoard {
    private AbstractField[][] mFields;
    private int mCols = 0, mRows = 0;
    
    public AbstractBoard() {
    }
    
    /**
     * Set up a new board
     * @param args : cols and rows
     */
    public AbstractBoard(int cols, int rows) {
        mFields = new AbstractField[rows][cols];
        for (int x = 0; x < cols; x++) {
            for (int y = 0; y < rows; y++) {
                mFields[y][x] = new AbstractField();
            }
        }
    }
    
    /**
     * Implement this class. Set up a specific board for a game.
     */
    protected abstract void initialise();
    
    /**
     * Returns AbstractField at given position.
     * @param args : col and row of position
     * @param returns : AbstractField or null if out of bounds. 
     */
    public AbstractField getFieldAt(int col, int row) {
        if (col < mCols && row < mRows && col >= 0 && row >= 0) {
            return mFields[row][col];
        }
        return null;
    }
    
    /**
     * Returns AbstractField at given position.
     * @param args : col and row of position
     * @param returns : AbstractField or null if out of bounds. 
     */
    public AbstractField setFieldAt(int col, int row) {
        if (col < mCols && row < mRows && col >= 0 && row >= 0) {
            return mFields[row][col];
        }
        return null;
    }
}
